Tasks:
Build interface board-  Initial design submitted to JLPCB for manuafacture 10-15-18

Raspberry pi OS and NodeJS installed on 10-18-18.  Configured for wireless and headless, utilizing SSH to access.

Server Needs (hs.js)
* Build the basic temperature control loop in NodeJS utilizing a proto board and LEDs to simulate output activiation till 
the interface board arrives.  Working, but will be an ongoing item for refinement
DONE - Need to broadcast the current measured house temperature to whatever clients are listening.
*Need to install limits for the temperature setpoint range.  Help prevent the stupid.
*Need to look into how to determine what a bad sensor looks like so it can be caught and reported.  Because Murphy is a thing. 


Web Interface(index.html)
*Build web interface - On going item that will recieve refinement over time.
*DONE - Currently the Display'd current temperature is a placeholder.  Needs to be able to catch a broadcast from the server and display
the actual real temp the system thinks exists.
*Need to add a system enable/disable toggle 


Hardware todo's
Eventually
*Solder components to the interface board on that is on order.
*Install sensors in remote locations.
*Security - Currently using a firewall to limit access to anyone that isn't on the local subnet.  This could be more robust
1/7/2019
I have a new sensor installed in the Bathroom.  The idea being to automatically detect when the humidity is rising presumably from someone taking a shower and turn on the fan.


12-26-18
Been awhile since I updated this.  I've installed a second sensor at the other end of the house.  So far the raspberry pi has been reading the signals flawlessly over 60ft away over non-data rated copper wire.  Interface board rev1 didn't quite work out the door.  I had to rework my design a bit and I was able to get a working result that allowed me to see my code function. Since then, I've modified the design by loosing the shift register and utilizing an optocoupler for controlling the heater system.  Added in several opto-triacs to control the ventillation system and hopefully future proof it a little bit to control the zone valves.  I'll submit the images later today and update the code for both the server and html.  Lots has changed.


10-24-18
The controller was programmed to check the temperature every five seconds and send updates to the webpage.  If the house
temperature was below the setpoint it would turn on/off accordingly.  So in theory I could end up with the heater cycling on/off
every five seconds all day long.  It would probably cause wear and tear on something.  So while that cycle time was nice for troubleshooting.  I made adjustments.  I now have 2 interval loops running in the (ht.js).  The first one is just like the original,
it takes samples of the temperatures and boiler status and reports that information to any connected clients in 5 second intervals.
It does have the capability to activate the heater but I'll come back to this.  The 2nd interval loop is the primary heating
loop,  All it does is check and compare temperatures to setpoints and turns on/off the heater accordingly every 30 minutes.  Which means the heater will have a 30 minute on or off time.  This is a rough guess on how long it takes to heat my particular house.  This value would need to change as needed for other homes.  Now what if your cold and you want to change the setpoint.  My wife isn't going to be
happy about waiting a possible 30 minutes for the primary heat interval to timeout adjust and kick the heater on.  So whenever a
client updates the setpoint.  I added a force_change variable that gets sets to 1.   I added a condition statement to the status
updating loop.  Whenever it sees a force_change = 1, it will additionaly compare the new setpoint to the current temperature and
turn on/off the heater accordingly.   So I have limited a risk to rapid cycling and provisioned for a rapid response to change.
Currently seems to be working well on my cobbled together protoboard.  Hopefully I'll receieve the designed PCB 10/31/18

10-22-18
*hs.js utilizing the prototyping board is now polling the AM2302 to grab the room temperature instead and will light the test LED
(indicating the output to the heater for now) when the setpoint is higher than the room temperature and turn off the LED when the
setpoint is below room temperature.
*Now the house temp ,humidity, and heater on/off status is broadcast to the web interface during each update.
*Whoa, apparently I confused my ventilation input signal with the heater.  What that means is that the 24 VAC that I thought I needed to short to operate the heater is acutally a 15 VDC signal. So a Triac that I was thinking about won't work.  I measured
the 15 VDC load with a amp meter and its only 6 milliamp.  I'm thinking a simple opto-coupler can handle that.  So I mocked it up
on a breadboard and it works.
*Next problem is that the PCB I designed is wrong. I was planning on Triacs.  But it isn't a total miss.  I had a 4 channel
opto-coupler to power the triacs instead of the Pi itself.  So I should be able to bypass the Triacs with a little hookup wire. I have to address that when the board arrives.  Maybe I'll design another later we'll see.


10-21-18
Prototyping board has a 2x20 header, 1 LED, a triac and a AM2302 sensor on board. LED works, AM2302 works.
*Need to set up a 24 VAC source to verify the triac works.


10-20-18
hs.js and Index.html have been uploaded to git
hs.js is my first crack at writing a temperature controlling loop that will turn on and off the output to the heater
based on a simple test.  Actual temperature vs a setpoint.  The setpoint can be modified with with a simple web interface (index.html).
I noticed that some setpoint limits will need to be installed.  Currently I can set an on/off threshold of 10 million degrees if
I so chose to click the button that long.  I need to limit the range to something like 50 to 75 degrees,  sound like good values
off the top of my head.

